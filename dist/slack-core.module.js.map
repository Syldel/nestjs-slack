{"version":3,"file":"slack-core.module.js","sourceRoot":"/","sources":["slack-core.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,2CAA+E;AAC/E,2CAAmD;AACnD,4DAAwD;AAExD,qCAAgF;AAKhF,IAAa,eAAe,uBAA5B,MAAa,eAAe;IAEnB,MAAM,CAAC,OAAO,CAAC,OAA2B;QAC/C,MAAM,QAAQ,GAAG,gCAAoB,CAAC,OAAO,CAAC,CAAC;QAE/C,OAAO;YACL,OAAO,EAAE,CAAC,QAAQ,CAAC;YACnB,MAAM,EAAE,iBAAe;YACvB,SAAS,EAAE,CAAC,QAAQ,CAAC;SACtB,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,OAAgC;QACzD,MAAM,QAAQ,GAAa;YACzB,MAAM,EAAE,CAAC,6BAAoB,CAAC;YAC9B,OAAO,EAAE,oBAAW;YACpB,UAAU,EAAE,CAAC,OAA2B,EAAE,EAAE,CAAC,0BAAiB,CAAC,OAAO,CAAC;SACxE,CAAC;QAEF,OAAO;YACL,OAAO,EAAE,CAAC,QAAQ,EAAE,4BAAY,CAAC;YACjC,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,MAAM,EAAE,iBAAe;YACvB,SAAS,EAAE;gBACT,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;gBACrC,QAAQ;gBACR,4BAAY;aACb;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,oBAAoB,CACjC,OAAgC;QAEhC,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE;YAC7C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;SACnD;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAA2C,CAAC;QACrE,OAAO;YACL,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;YACxC;gBACE,OAAO,EAAE,QAAQ;gBACjB,QAAQ;aACT;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,0BAA0B,CACvC,OAAgC;QAEhC,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO;gBACL,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;gBAC5B,OAAO,EAAE,6BAAoB;gBAC7B,UAAU,EAAE,OAAO,CAAC,UAAU;aAC/B,CAAC;SACH;QACD,MAAM,MAAM,GAAG;YACb,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW,CAAoC;SAC7E,CAAC;QACF,OAAO;YACL,OAAO,EAAE,6BAAoB;YAC7B,UAAU,EAAE,CAAO,cAAyC,EAAE,EAAE,gDAC9D,OAAA,MAAM,cAAc,CAAC,wBAAwB,EAAE,CAAA,GAAA;YACjD,MAAM;SACP,CAAC;IACJ,CAAC;CACF,CAAA;AAnEY,eAAe;IAF3B,eAAM,EAAE;IACR,eAAM,CAAC,EAAE,CAAC;GACE,eAAe,CAmE3B;AAnEY,0CAAe","sourcesContent":["import { Global, Module, DynamicModule, Provider, Type } from \"@nestjs/common\";\r\nimport { createSlackProviders } from \"./providers\";\r\nimport { SlackService } from \"./services/slack.service\";\r\nimport { SlackConfigAsyncOptions, SlackConfigOptions, SlackConfigOptionsFactory } from \"./interfaces\";\r\nimport { createSlackClient, SLACK_CONFIG_OPTIONS, SLACK_TOKEN } from \"./common\";\r\n\r\n\r\n@Global()\r\n@Module({})\r\nexport class SlackCoreModule {\r\n\r\n  public static forRoot(options: SlackConfigOptions): DynamicModule {\r\n    const provider = createSlackProviders(options);\r\n\r\n    return {\r\n      exports: [provider],\r\n      module: SlackCoreModule,\r\n      providers: [provider]\r\n    };\r\n  }\r\n\r\n  public static forRootAsync(options: SlackConfigAsyncOptions): DynamicModule {\r\n    const provider: Provider = {\r\n      inject: [SLACK_CONFIG_OPTIONS],\r\n      provide: SLACK_TOKEN,\r\n      useFactory: (options: SlackConfigOptions) => createSlackClient(options),\r\n    };\r\n\r\n    return {\r\n      exports: [provider, SlackService],\r\n      imports: options.imports,\r\n      module: SlackCoreModule,\r\n      providers: [\r\n        ...this.createAsyncProviders(options),\r\n        provider,\r\n        SlackService\r\n      ],\r\n    };\r\n  }\r\n\r\n  private static createAsyncProviders(\r\n    options: SlackConfigAsyncOptions,\r\n  ): Provider[] {\r\n    if (options.useExisting || options.useFactory) {\r\n      return [this.createAsyncOptionsProvider(options)];\r\n    }\r\n    const useClass = options.useClass as Type<SlackConfigOptionsFactory>;\r\n    return [\r\n      this.createAsyncOptionsProvider(options),\r\n      {\r\n        provide: useClass,\r\n        useClass,\r\n      },\r\n    ];\r\n  }\r\n\r\n  private static createAsyncOptionsProvider(\r\n    options: SlackConfigAsyncOptions,\r\n  ): Provider {\r\n    if (options.useFactory) {\r\n      return {\r\n        inject: options.inject || [],\r\n        provide: SLACK_CONFIG_OPTIONS,\r\n        useFactory: options.useFactory,\r\n      };\r\n    }\r\n    const inject = [\r\n      (options.useClass || options.useExisting) as Type<SlackConfigOptionsFactory>,\r\n    ];\r\n    return {\r\n      provide: SLACK_CONFIG_OPTIONS,\r\n      useFactory: async (optionsFactory: SlackConfigOptionsFactory) =>\r\n        await optionsFactory.createSlackConfigOptions(),\r\n      inject,\r\n    };\r\n  }\r\n}"]}